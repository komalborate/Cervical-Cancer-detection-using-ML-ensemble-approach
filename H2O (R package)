
#Loading h2oEnsemble Package in R
library(h2oEnsemble)  

#Intiating H2O cluster
h2o.init(nthreads = -1)  
h2o.removeAll() #Remove already existed objects on H2O cluster

#Load library devtools
library(devtools)
#install.packages("https://h2o-release.s3.amazonaws.com/h2o-ensemble/R/h2oEnsemble_0.2.1.tar.gz", repos = NUL

# Import training set/testing  set in R
train <- h2o.importFile("Train.csv")
test <- h2o.importFile("Test.csv")

#Declaring target variable
y <- "Biopsy"
x <- setdiff(names(train), y)
family <- "binomial"


#Target variable should be convereted to a factor for classification
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])

#For cross-validation
nfolds <- 5  

#glm1 <- h2o.glm(x = x, y = y, family = family, 
#                training_frame = train,
#                nfolds = nfolds,
#                fold_assignment = "Modulo",
#                keep_cross_validation_predictions = TRUE)

#Training Gradient Boosted Machine model
gbm1 <- h2o.gbm(x = x, y = y, distribution = "bernoulli",
                training_frame = train,
                seed = 1,
                nfolds = nfolds,
                fold_assignment = "Modulo",
                keep_cross_validation_predictions = TRUE)


#Training Random Forest model
rf1 <- h2o.randomForest(x = x, y = y,
                        training_frame = train,
                        seed = 1,
                        nfolds = nfolds,
                        fold_assignment = "Modulo",
                        keep_cross_validation_predictions = TRUE)


#Training Deep Learning model
dl1 <- h2o.deeplearning(x = x, y = y, distribution = "bernoulli",
                        training_frame = train,
                        nfolds = nfolds,
                        fold_assignment = "Modulo",
                        keep_cross_validation_predictions = TRUE)

#List of models used
models <- list( gbm1, rf1, dl1)


metalearner <- "h2o.glm.wrapper"

stack <- h2o.stack(models = models,
                   response_frame = train[,y],
                   metalearner = metalearner, 
                   seed = 1,
                   keep_levelone_data = TRUE)


# Calculating test set performance 
perf <- h2o.ensemble_performance(stack, newdata = test)

print(perf)

